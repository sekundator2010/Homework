# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду.
# Также укажите в комментариях версию Python и разрядность вашей ОС.
#  Версия интерпретатора 3.9 Windows 64 бит.
# На самом деле считаю что для наглядности всё же лучше использовать разные задачи, ибо нам просто интересно сколько бит
# в словаре? В матрице? А анализировать похожие вещи... не слишком конструктивно ибо ничего нового не узнаем.
# Интересно бы было узнать размерность defaultdict, поэтому первым делом вычисляем размер общей ссылки а затем пройдёмся
# по каждому элементу и сложим всё это
import collections
import sys
# defdict = collections.defaultdict(list)
# value = int(input('Введите количество компаний, учавствующих в сравнении'))
# sum_profit, summ = [], 0
# for q in range(value):
#     name_company = input('Введите название компании')
#     profit_1 = int(input('Введите первый показатель выручки.'))
#     profit_2 = int(input('Введите второй показатель выручки.'))
#     profit_3 = int(input('Введите третий показатель выручки.'))
#     a = profit_1 + profit_2 + profit_3
#     defdict[name_company].append(a)
# print(defdict)
# sum_dict = []
# sum_first = sys.getsizeof(defdict)
# for q, a in defdict.items():
#     sum_dict.append(sys.getsizeof(q) + sys.getsizeof(a))
# print(f'ссылка на общее расположение элементов в словаре defaultdict будет равна {sum_first}, а общаая сумма байт будет '
#       f'{sum_first + sum(sum_dict)}')
#
# for u in defdict.values():
#     sum_profit.append(u)
#     summ += u[0]
# average = summ / len(defdict.values())
# print(f'Средняя выручка компаний {average}')
# for key, item in defdict.items():
#     if item[0] > average:
#         print(f'Выручка компании {key} выше среднего у выборки')
#     elif item[0] < average:
#         print(f'Доходы компании {key} ниже среднего у выборки')
# Получается весьма внушительное число - 240 общая ссылка, а суммарная 518 что как то сильно много... для двух компаний
#  из выборки, которые я взял.

# Закоментировал предыдущую задачу ибо так удобнее по одной разбирать! Вот ещё один интересный элемент - матрица.
a = [[4, 6, 7, 3, 8], [4, 1, 77, 9, 2], [31, 4, 6, 88, 0]]
first_sum = sys.getsizeof(a)
sum_matrix = []
for i in a:
    for unpack in i:
        sum_matrix.append(sys.getsizeof(unpack))
print(f'Размер общей ссылки составляет {first_sum}, а суммарный обьём памяти, затрачиваемый на все элементы '
      f'{sum(sum_matrix) + first_sum}')
i, mini_mum = 0, []
while len(a[0]) >= i:
    columns = [a[0], a[1], a[2]]
    value_min = min(columns)
    mini_mum.append(value_min)
    columns = []
    i += 1
print(f'Минимальными числами в своих столбцах являются {mini_mum}')

# Матрица оказалась более жизнеспособной и менее затратной в плане памяти

